// AdminGoTo (Map change aliases)
struct mapLink
{
    var string url;
    var string alias;
};
var array<mapLink> maps;


reliable server function bool IsAdmin() {
    return WorldInfo.Game.AccessControl.IsAdmin(self) || WorldInfo.NetMode == NM_Standalone;
}

reliable server function S_AdminBroadcastMessage(string Message, optional bool bShowName=true) {
    local AOCPlayerController PC;
    foreach WorldInfo.AllControllers(class'AOCPlayerController', PC) {
        if (bShowName)
            PC.ReceiveChatMessage(AOCPRI(PlayerReplicationInfo).GetHumanReadableName()$":"@Message, EFAC_ALL, false, false, ,false);
        else
            PC.ReceiveChatMessage(Message, EFAC_ALL, false, false, ,false);
    }
}

exec function AdminBroadcastMessage(String Message) {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage(Message);
}

exec function AdminChangeTeam(String PlayerName) {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage("AdminChangeTeam "$PlayerName);
    super.AdminChangeTeam(PlayerName);
}

exec function AdminChangeTeamDamageAmount(float Amount) {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage("AdminChangeTeamDamageAmount "$Amount);
    super.AdminChangeTeamDamageAmount(Amount);
}

exec function AdminCancelVote() {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage("AdminCancelVote");
    super.AdminCancelVote();
}

exec function AdminReadyAll() {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage("AdminReadyAll");
    super.AdminReadyAll();
}

function bool SetPause(bool bPause, optional delegate<CanUnpause> CanUnpauseDelegate=CanUnpause) {
	local bool bResult;
	if (bPause) {
		bFire = 0;
		// Pause gamepad rumbling too if needed
		bResult = WorldInfo.Game.SetPause(self,CanUnpauseDelegate);
		if (bResult)
			PauseRumbleForAllPlayers();
	} else if (IsAdmin()) {
		WorldInfo.Game.ClearPause();
		// If the unpause is complete, let rumble occur
		if (WorldInfo.Pauser == None) {
			// If we did a gameplay frame pause clear it out now
			WorldInfo.bGameplayFramePause = false;

			PauseRumbleForAllPlayers(false);
		}
	}
	return bResult;
}

/*function bool SetPause(bool bPause, optional delegate<CanUnpause> CanUnpauseDelegate=CanUnpause) {
	local bool bResult;
    bResult = false;
	if (bPause)
        bResult = ActualPause(CanUnpauseDelegate);
	else
        ClientDisplayConsoleMessage("Please use the command 'ImbaModUnpause' to unpause.");
	return bResult;
}

exec function ImbaModPause() {
    if (IsAdmin())
        ActualPause();
    else
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
}

exec function ImbaModUnpause() {
    if (IsAdmin() && bPaused)
        StartUnpauseCountdown();
    else if (!bPaused)
        ClientDisplayConsoleMessage("You cannot unpause at this time.");
    else
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
}

reliable server function StartUnpauseCountdown() {
    UnpauseCountdownTime = Default.UnpauseCountdownTime;
    AdminBroadcastMessage("Unpausing in...");
    CountdownTick();
    SetTimer(1.0f, true, 'CountdownTick');
}

reliable server function CountdownTick() {
    if (UnpauseCountdownTime == 0) {
        ActualUnpause();
        ClearTimer('CountdownTick');
    } else {
        AdminBroadcastMessage("    "@UnpauseCountdownTime@"...");
        UnpauseCountdownTime--;
    }
}

reliable server function bool ActualPause(delegate<CanUnpause> CanUnpauseDelegate=CanUnpause) {
    local bool bResult;
    bResult = false;
    if (IsAdmin() && !bPaused) {
        bFire = 0;
        // Pause gamepad rumbling too if needed
        bResult = WorldInfo.Game.SetPause(self,CanUnpauseDelegate);
        if (bResult) {
            PauseRumbleForAllPlayers();
            bPaused = true;
        }
    }
    return bResult;
}

reliable server function ActualUnpause() {
    if (IsAdmin() && bPaused) {
        WorldInfo.Game.ClearPause();
        // If the unpause is complete, let rumble occur
        if (WorldInfo.Pauser == None) {
            // If we did a gameplay frame pause clear it out now
            WorldInfo.bGameplayFramePause = false;
            PauseRumbleForAllPlayers(false);
        }
        bPaused = false;
    }
}*/

exec function GetAdmins() {
    S_GetAdmins();
}

reliable server function S_GetAdmins() {
    local AOCPlayerController PC;
    ReceiveChatMessage("All admins:", EFAC_ALL, false, false, ,false);
    foreach WorldInfo.AllControllers(class'AOCPlayerController', PC) {
        if (AOCPRI(PC.PlayerReplicationInfo).bAdmin)
            ReceiveChatMessage(AOCPRI(PC.PlayerReplicationInfo).GetHumanReadableName(), EFAC_ALL, false, false, ,false);
    }
}

reliable client function NotifyTournamentWaiting(float Threshold) {
	bShowedTournamentWaitingMessage = true;
}

reliable server function S_SendF10Message() {
    ReceiveChatMessage("You will implode in 1 second.", EFAC_ALL, false, false, ,false);
}

exec function FOV(float F) {
    if((F >= 60.0 && F <= 165.0) || PlayerReplicationInfo.bOnlySpectator) {
		DefaultFOV = F;
		DesiredFOV = DefaultFOV;

        if((F >= 60.0 && F <= 165.0) && PlayerCamera != None) {
            PlayerCamera.SetFOV( F );
            return;
        }

		if (IsLocalPlayerController()) {
			MyFOV = F;
			default.MyFOV = F;
			StaticSaveConfig();
		}
	}
}

/**
 *  This allows the client to view and modify their AudioGroup volumes via the console.
 *
 *  This would be a nice and terse solution which iterates wherever possible,
 *  if UnrealScript supported pointers or referencing object properties using string variables...
 *  However it apparently doesn't (or perhaps I don't know the syntax) so we're stuck with this.
 */
exec function volume(optional string AudioGroup, optional float Value = -1.0f) {

    // If the first param was 'help' or empty, display help
    if ((AudioGroup ~= "help") || (AudioGroup == "")) {
        ClientDisplayConsoleMessage("------");
        ClientDisplayConsoleMessage("volume\n    Displays this help message\n");
        ClientDisplayConsoleMessage("volume help\n    Displays this help message\n");
        ClientDisplayConsoleMessage("volume all\n    Displays all AudioGroups and their current Value (%)\n");
        ClientDisplayConsoleMessage("volume master\n    Displays the current Value (%) for the 'Master' AudioGroup\n");
        ClientDisplayConsoleMessage("volume master 50\n    Sets the Value for the 'Master' AudioGroup to 50%\n");
        ClientDisplayConsoleMessage("------");
        return;
    }

    // If the AudioGroup parameter was provided but no Value was provided, print current Values
    if (AudioGroup != "" && Value == -1.0f) {

        // If AudioGroup was "all", display current Values of all AudioGroups
        if (AudioGroup ~= "all") {
            ClientDisplayConsoleMessage("Master\n    "    $ class'AOCPlayerController'.default.DefaultMaster  * 100  $ " %");
            ClientDisplayConsoleMessage("Music\n    "     $ class'AOCPlayerController'.default.DefaultMusic   * 100  $ " %");
            ClientDisplayConsoleMessage("Ambient\n    "   $ class'AOCPlayerController'.default.DefaultAmbient * 100  $ " %");
            ClientDisplayConsoleMessage("Character\n    " $ class'AOCPlayerController'.default.DefaultChar    * 100  $ " %");
            ClientDisplayConsoleMessage("UI\n    "        $ class'AOCPlayerController'.default.DefaultUI      * 1000 $ " %");
            ClientDisplayConsoleMessage("Chatter\n    "   $ class'AOCPlayerController'.default.DefaultChatter * 100  $ " %");

        // Otherwise, Check if the AudioGroup parameter matched a specific item in audioGroups
        } else {
            if (AudioGroup ~= "master")
                ClientDisplayConsoleMessage("Master : "    $ class'AOCPlayerController'.default.DefaultMaster  * 100  $ " %");
            else if (AudioGroup ~= "music")
                ClientDisplayConsoleMessage("Music : "     $ class'AOCPlayerController'.default.DefaultMusic   * 100  $ " %");
            else if (AudioGroup ~= "ambient")
                ClientDisplayConsoleMessage("Ambient : "   $ class'AOCPlayerController'.default.DefaultAmbient * 100  $ " %");
            else if (AudioGroup ~= "character")
                ClientDisplayConsoleMessage("Character : " $ class'AOCPlayerController'.default.DefaultChar    * 100  $ " %");
            else if (AudioGroup ~= "ui")
                ClientDisplayConsoleMessage("UI : "        $ class'AOCPlayerController'.default.DefaultUI      * 1000 $ " %");
            else if (AudioGroup ~= "chatter")
                ClientDisplayConsoleMessage("Chatter : "   $ class'AOCPlayerController'.default.DefaultChatter * 100  $ " %");
            else
                ClientDisplayConsoleMessage("'" $ AudioGroup $ "' is not a valid AudioGroup");
        }

    // If the AudioGroup and Value parameters were provided, set those values and update the config
    } else {

        // Convert human-readable Value range (0% - 100%) to actual config variable range
        if (AudioGroup ~= "ui") {
            // UI max is 0.1
            Value /= 1000;
            Value = FClamp(Value, 0.0f, 0.1f);
        } else {
            // Everything else is max 1.0
            Value /= 100;
            Value = FClamp(Value, 0.0f, 1.0f);
        }

        // Update config variables
        if (AudioGroup ~= "master")
	        class'AOCPlayerController'.default.DefaultMaster = Value;
        else if (AudioGroup ~= "music")
	        class'AOCPlayerController'.default.DefaultMusic = Value;
        else if (AudioGroup ~= "ambient")
	        class'AOCPlayerController'.default.DefaultAmbient = Value;
        else if (AudioGroup ~= "character")
	        class'AOCPlayerController'.default.DefaultChar = Value;
        else if (AudioGroup ~= "ui")
	        class'AOCPlayerController'.default.DefaultUI = Value;
        else if (AudioGroup ~= "chatter")
	        class'AOCPlayerController'.default.DefaultChatter = Value;
        else {
            ClientDisplayConsoleMessage("'" $ AudioGroup $ "' is not a valid AudioGroup");
            return;
        }

        // Update config file
        class'AOCPlayerController'.static.StaticSaveConfig();

        // Initialise sound again
        InitializeSound();

    }

}

exec function ce(optional name EventName) {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage("CauseEvent "$EventName);
    super.ce(EventName);
}

exec function CauseEvent(optional name EventName) {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage("CauseEvent "$EventName);
    super.CauseEvent(EventName);
}

exec function AdminGoTo(optional string MapAlias) {

    local mapLink mapItem;

    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }

    // HELP: print the maps' urls and aliases and exit early
    if (MapAlias ~= "help") {
        ClientDisplayConsoleMessage("List of maps and their aliases:");
        ClientDisplayConsoleMessage("------");

        foreach maps(mapItem)
        {
            ClientDisplayConsoleMessage(mapItem.alias $ " : " $ mapItem.url);
        }
        
        ClientDisplayConsoleMessage("------");

        return;  
    }

    // Iterate through all maps, attempting to match an alias (case-insensitive)
    // Change map and exit early if a match is found
    foreach maps(mapItem)
    {
        if (MapAlias ~= mapItem.alias) {
            ServerChangeMap(mapItem.url);
            return;
        }
    }

    // If nothing has matched, notify the user that they provided an invalid parameter
    ClientDisplayConsoleMessage("'MapAlias' did not match any Map's alias.");
    ClientDisplayConsoleMessage("Use 'AdminGoTo Help' for some help!");
    
}

exec function AdminForceSpectate(String PlayerName) {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminForceSpectate(PlayerName);
}

reliable server function S_AdminForceSpectate(String PlayerName) {
    local AOCPlayerController Target;
    local AOCAccessControl AccessControl;

    AccessControl = AOCAccessControl(WorldInfo.Game.AccessControl);

	if (!IsAdmin()) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}

	Target = AOCPlayerController(AccessControl.GetControllerFromString(PlayerName));
	if (Target == none) {
		ClientDisplayConsoleMessage("The specified player was not found.");
		return;
	}

	if(Target.CurrentFamilyInfo.class == class'AOCFamilyInfo_Agatha_King' || Target.CurrentFamilyInfo.class == class'AOCFamilyInfo_Mason_King' || AOCPRI(Target.PlayerReplicationInfo).bAdmin) {
		ClientDisplayConsoleMessage("The specified player cannot be moved to spectate.");
		return;
	}

	Target.JoinSpectatorTeam();

    S_AdminBroadcastMessage("AdminForceSpectate "$AOCPRI(Target.PlayerReplicationInfo).GetHumanReadableName());
}

exec function Reload() {
	if(!ScriptBlockedInputs[EINBLOCK_Reload] && ImbaModWeapon_Crossbow(Pawn.Weapon) != none)
		ImbaModWeapon_Crossbow(Pawn.Weapon).ActivateReload();
}

exec function PerformAim() {
	if (class<ImbaModWeapon_Crossbow>(Pawn.Weapon.Class) != none)
		StartFire(1);
}

DefaultProperties
{
    suicideDelay = 1.0f
    
    // AdminGoTo function
    maps(0)=(url="AOCFFA-Duelyard_p", alias="DY")
    maps(1)=(url="AOCLTS-Moor_p", alias="MR")
    maps(2)=(url="AOCTO-Battlegrounds_v3_P", alias="BG")
    maps(3)=(url="AOCTO-Darkforest_p", alias="DF")
    maps(4)=(url="AOCTO-Hillside_p", alias="HS")
    maps(5)=(url="AOCTO-Stoneshill_p", alias="SH")
    maps(6)=(url="AOCTO-Citadel_p", alias="CD")
    maps(7)=(url="AOCTO-Coldfront_p", alias="CF")
    maps(8)=(url="AOCTO-Outpost_p", alias="OP")
    maps(9)=(url="AOCTO-Belmez-CM_P", alias="BZ")
    maps(10)=(url="AOCTO-CastleAssault-CM_P", alias="CA")
    maps(11)=(url="AOCTO-Cove-CM_P", alias="CV")
    maps(12)=(url="AOCTO-DrunkenBazaar-CM_p", alias="DB")
    maps(13)=(url="AOCTO-KingsGarden-CM_p", alias="KG")
}
